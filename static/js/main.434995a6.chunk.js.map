{"version":3,"sources":["components/PlaceGrid/placegrid.js","App.js","reportWebVitals.js","index.js"],"names":["PlaceGrid","props","searchComponent","onSubmit","handleSubmit","type","value","state","query","onChange","handleChange","moviesCompoment","movies","map","index","Title","Year","Poster","MovieCard","className","src","loaded","bind","movieAPI","this","fetch","then","res","json","fetchData","setState","event","target","preventDefault","React","Component","App","cloths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPA0GeA,E,kDAxGb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IA8CRC,gBAAkB,WAChB,OACE,sBAAMC,SAAU,EAAKC,aAArB,SACE,kCACE,uBACEC,KAAK,OACLC,MAAO,EAAKC,MAAMC,MAClBC,SAAU,EAAKC,eAEjB,uBAAOL,KAAK,iBAxDD,EA8DnBM,gBAAkB,WAChB,OACE,EAAKJ,MAAMK,OAAOC,KAAI,WAA0BC,GAAW,IAAlCC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,OACpC,OAAO,EAAKC,UAAUH,EAAOE,EAAQD,OAjExB,EAsEnBE,UAAY,SAACH,EAAOE,EAAQD,GAC1B,OACE,sBAAKG,UAAU,OAAf,UACE,qBAAKA,UAAU,QAAf,SACE,6BAAKJ,MAEP,qBAAKI,UAAU,MAAf,SACE,qBAAKC,IAAKH,UA1EhB,EAAKV,MAAQ,CACXc,QAAQ,EACRb,MAAO,MACPI,OAAQ,IAGV,EAAKF,aAAe,EAAKA,aAAaY,KAAlB,gBACpB,EAAKlB,aAAe,EAAKA,aAAakB,KAAlB,gBAVH,E,qDAanB,WAAqB,IAAD,OACZC,EACJ,8CAAgDC,KAAKjB,MAAMC,MAC7DiB,MAAMF,GACHG,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAKL,OAJA,EAAKC,SAAS,CACZlB,OAAQiB,EAAS,OACjBR,QAAQ,IAEHQ,EAAS,Y,0BAItB,SAAaE,GACXP,KAAKM,SAAS,CAAEtB,MAAOuB,EAAMC,OAAO1B,U,0BAGtC,SAAayB,GAAQ,IAAD,OACZR,EACJ,8CAAgDC,KAAKjB,MAAMC,MAE7DiB,MAAMF,GACHG,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAKL,OAJA,EAAKC,SAAS,CACZlB,OAAQiB,EAAS,OACjBR,QAAQ,IAEHQ,EAAS,UAEpBE,EAAME,mB,oBAuCR,WACE,OACE,sBAAKd,UAAU,gBAAf,UAEE,4DACCK,KAAKtB,kBAGN,qBAAKiB,UAAU,aAAf,SAEGK,KAAKjB,MAAMc,OAA+B,MAArBG,KAAKjB,MAAMK,OAC/BY,KAAKb,kBAEL,0F,GAjGYuB,IAAMC,WCkBfC,E,4MAdb7B,MAAQ,CACNc,QAAQ,EACRgB,OAAQ,I,4CAGV,WACE,OACE,qBAAKlB,UAAU,MAAf,SACE,cAAC,EAAD,U,GATUgB,aCQHG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.434995a6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nclass PlaceGrid extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loaded: false,\n      query: \"war\",\n      movies: [],\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    const movieAPI =\n      \"https://www.omdbapi.com/?apikey=45f0782a&s=\" + this.state.query;\n    fetch(movieAPI)\n      .then((res) => res.json())\n      .then((fetchData) => {\n        this.setState({\n          movies: fetchData[\"Search\"],\n          loaded: true,\n        });\n        return fetchData[\"Search\"];\n      });\n  }\n\n  handleChange(event) {\n    this.setState({ query: event.target.value });\n  }\n\n  handleSubmit(event) {\n    const movieAPI =\n      \"https://www.omdbapi.com/?apikey=45f0782a&s=\" + this.state.query;\n\n    fetch(movieAPI)\n      .then((res) => res.json())\n      .then((fetchData) => {\n        this.setState({\n          movies: fetchData[\"Search\"],\n          loaded: true,\n        });\n        return fetchData[\"Search\"];\n      });\n    event.preventDefault();\n  }\n\n  searchComponent = () => {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          <input\n            type=\"text\"\n            value={this.state.query}\n            onChange={this.handleChange}\n          />\n          <input type=\"Submit\" />\n        </label>\n      </form>\n    );\n  };\n\n  moviesCompoment = () =>{\n    return (\n      this.state.movies.map(({ Title, Year, Poster }, index) => {\n        return this.MovieCard(Title, Poster, Year);\n      })\n    )\n  }\n\n  MovieCard = (Title, Poster, Year) => {\n    return (\n      <div className=\"card\">\n        <div className=\"title\" >\n          <h3>{Title}</h3>\n        </div>\n        <div className=\"img\">\n          <img src={Poster} />\n        </div>\n      </div>\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"Movie-Section\">\n        {/* search section */}\n        <h1>Seach Movies with Keywords</h1>\n        {this.searchComponent()}\n\n        {/* Display movie section */}\n        <div className=\"Moview-Row\">\n          {/* handle case of failure use cases */}\n          {this.state.loaded & (this.state.movies != null) ? (\n            this.moviesCompoment()\n          ) : (\n            <h4>No Data Found. Try Again with different KEYWORD</h4>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PlaceGrid;\n","import \"./App.css\";\nimport React, { Component } from \"react\";\nimport PlaceGrid from \"./components/PlaceGrid/placegrid\";\n\nclass App extends Component {\n  state = {\n    loaded: false,\n    cloths: [],\n  };\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <PlaceGrid></PlaceGrid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}